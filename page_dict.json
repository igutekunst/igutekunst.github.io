{
    "/nav": {
        "title": "nav",
        "date": "2024-09-16",
        "tags": [],
        "publish": true,
        "url": "/nav",
        "path": "nav.md",
        "content": "# Example Site\n\n## Navigation\n- [Blog](blog)\n- [About](about)\n- [Contact](contact)"
    },
    "/contact": {
        "title": "Contact Me",
        "date": "2024-09-16",
        "tags": [],
        "publish": true,
        "url": "/contact",
        "path": "contact.md",
        "content": "# Connect With Me\n\nYou can connect with me in a few ways:\n\n - Connect on [Matrix](https://matrix.org) [@isaac:iamthatiam.org](https://matrix.to/#/@isaac:iamthatiam.org)\n - Comment on this or any page"
    },
    "/": {
        "title": "Programming Reality",
        "date": "2024-08-31",
        "tags": [],
        "publish": true,
        "url": "/",
        "path": "index.md",
        "content": "Welcome to Programming Reality, a site about changing the nature of reality, one line of code at a time.\n\n\n\n## Featured Posts {: .featured-posts}\n - [[blog/03-simple-automation]]{: .featured-post}\n - [[blog/01-personal-infrastructure]]{: .featured-post}\n - [[blog/00-welcome]]{: .featured-post}"
    },
    "/about": {
        "title": "About",
        "date": "2024-09-16",
        "tags": [],
        "publish": true,
        "url": "/about",
        "path": "about.md",
        "content": "# About the Site\nThis is a personal website for Isaac Harrison Gutekunst. I've created this site to share my exploration of programming reality. The main focus of this is highly technical articles about computer programming, engineering, and [[philosophy]]. \n\n## Content\n\nThe site is structured primarily as a \"blog\", where I write about projects I am working on, or small pieces of knowledge I've acquired over time."
    },
    "/blog/2024-08-27-welcome-to-programming-reality": {
        "title": "Welcome to Programming Reality",
        "date": "2024-08-27",
        "tags": [
            "blog",
            "philosophy",
            "devops"
        ],
        "publish": true,
        "url": "/blog/2024-08-27-welcome-to-programming-reality",
        "path": "blog/00-welcome.md",
        "content": "[Read on Substack](https://programmingreality.substack.com/p/welcome-to-programming-reality)\n\n[Read on LinkedIn](https://www.linkedin.com/pulse/welcome-programming-reality-isaac-gutekunst-a02ic/)\n\nWelcome to my website and blog. Join me as I share my exploration of reality through the lens of language, and primarily machine-readable language.\n\nI will group my writing into three or more primary categories:\n\n1) My journey working on long-term projects. Posts in this category will be highly technical, and involve topics like computer programming, distributed systems, databases, networking, protocols and more.\n\n2) General musings on the \"Nature of Reality\". I'll typically tag these as \"philosophy\".\n\n3) Miscellaneous things I'm learning. I'll tag these as \"did-you-know\".\n\nI will kick off this journey by introducing my first long-term project: Building a \"Personal Cloud\", using Infrastructure as Code (IaC) tools and my best attempt at building something production-ready.\n\n## Programming Reality\n\nProgramming Reality as phrase is intended to evoke the idea that reality is flexible, and can be programmed with intention. People have always programmed reality with their words by telling stories. The stories we tell each other shape how we see the world, and perhaps even shape the structure of reality itself. In the current age, the programming is becoming more explicit and less occulted. People write computer programs that capture intentions, and then when placed into the right environment have real measurable affects on the physical world. I can tap my fingers on a piece of glass in a certain pattern and  30 minutes later, someone will bring food to my door. This is the magic of Uber Eats on an iPhone using the Internet.\n\n\n# About Me\nIn my professional career, I've spent over a decade working to build various computer systems, primarily for robotics, consumer electronics and aerospace. I've written code that is likely running in mars, running on a satellite orbiting overhead, running inside the headphones worn by millions of people, and running in many more glamorous and not so glamorous environments.\n\nPersonally, I've always been drawn to look closely at the inner workings of everything. I am drawn to understand how light bulbs function, and also why people go to war. I love looking at the structure of companies, families and societies big and small. I see patterns repeating at every level of abstraction, from the organization of ants, to the arrangement of code within a distributed system. \n\n## Why I'm Publishing this Site\n\nI love the world, and feel like sharing. I like building cool stuff! I think everything about life is amazing, and want to share that!\n\nI have so many ideas in my head that I love and want to see take physical form. I've decided to take the next step and start writing about them publicly."
    },
    "/blog/2024-09-15-personal-infrastructure-part-3:-quality-of-life-improvements-with-justfile-automation": {
        "title": "Personal Infrastructure Part 3: Quality of Life Improvements with Justfile Automation",
        "date": "2024-09-15",
        "tags": [
            "blog",
            "development",
            "infrastructure",
            "ansible"
        ],
        "publish": true,
        "url": "/blog/2024-09-15-personal-infrastructure-part-3:-quality-of-life-improvements-with-justfile-automation",
        "path": "blog/03-simple-automation.md",
        "content": "In this post, I describe how I like to use Justfiles to make running common tasks easier.\n\n## 1. Justfile:\n\nI created a Justfile to streamline the setup and execution of various tasks in our project. \n\nJustfiles are simplified modern alternatives to Makefiles. Here's a quick overview of what our Justfile does:\n\nI prefer them for simple task execution that doesn't require the complexity and dependency resolution of Makefiles. I also like avoiding Makefile syntax whenever possible.\n\n\nThe `Justfile` has recipes for the following:\n\n- Creating and activating a virtual environment.\n- Installing or verifying dependencies (Ansible and Cookiecutter).\n- Generating a vault password for Ansible.\n- Creating secrets for our infrastructure.\n- Setting up the entire environment in one go.\n- Running the Ansible playbook.\n\nThe Justfile simplifies our workflow by encapsulating complex commands into simple, memorable recipes. For example, instead of remembering long command sequences, we can now just run `just setup` to prepare our environment or `just ansible_playbook` to execute our Ansible playbook.\n\nThis approach not only saves time but also reduces the likelihood of errors, ensuring consistency across different development environments and making it easier for team members to contribute to the project.\n\n\n```Justfile\n# Justfile\n\n# Set the shell to bash\nset shell := [\"bash\", \"-cu\"]\n\n# Define a variable for the virtual environment directory\nvenv_dir := \"venv\"\n\n# Recipe to create or activate the virtual environment\nvenv:\n    if [ ! -d {{venv_dir}} ]; then \\\n        python3 -m venv {{venv_dir}}; \\\n    fi\n    . {{venv_dir}}/bin/activate\n\n# Recipe to install or verify Ansible and Cookiecutter are installed\ninstall_dependencies:\n    just venv\n    . {{venv_dir}}/bin/activate\n    if ! pip show ansible > /dev/null 2>&1; then \\\n        pip install ansible; \\\n    else \\\n        echo \"Ansible is already installed\"; \\\n    fi\n    if ! pip show cookiecutter > /dev/null 2>&1; then \\\n        pip install cookiecutter; \\\n    else \\\n        echo \"Cookiecutter is already installed\"; \\\n    fi\n\ncreate_vault_password:\n    python3 physical-server-ansible-playbook/get_vault_pass.py generate\n\ncreate_secrets:\n    python3 physical-server-ansible-playbook/create_secrets.py cir\n\n# Recipe to set up the environment (create venv and install dependencies)\nsetup:\n    just venv\n    just install_dependencies\n    just create_vault_password\n\n# Add more tasks as needed\n\n\nansible_playbook:\n    just setup\n    cd physical-server-ansible-playbook && ansible-playbook playbook.yml\n\nping:\n    just setup\n    cd physical-server-ansible-playbook && ansible -i inventory/hosts all -m ping\n\n```\n\n### 1.1 Makefile\n\nTo really push the automation to the next level, I made a Makefile that install [just](https://github.com/casey/just).\n\n\n```bash\n# Install Just\n\n# Detect the operating system\nUNAME_S := $(shell uname -s)\n\n# Default installation method (for unsupported systems)\ninstall_just_default:\n\t@echo \"Unsupported operating system. Please install Just manually.\"\n\n# macOS installation\nifeq ($(UNAME_S),Darwin)\ninstall_just:\n\t@if command -v port >/dev/null 2>&1; then \\\n\t\tsudo port install just; \\\n\telif command -v brew >/dev/null 2>&1; then \\\n\t\tbrew install just; \\\n\telse \\\n\t\techo \"Neither MacPorts nor Homebrew is installed. Installing Homebrew...\"; \\\n\t\t/bin/bash -c \"$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"; \\\n\t\tbrew install just; \\\n\tfi\nelse\n\n# Debian-based Linux installation\nifeq ($(UNAME_S),Linux)\ninstall_just:\n\t@if command -v apt-get >/dev/null 2>&1; then \\\n\t\tsudo apt-get update && sudo apt-get install -y curl; \\\n\t\tcurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | sudo bash -s -- --to /usr/local/bin; \\\n\telse \\\n\t\techo \"This doesn't appear to be a Debian-based system. Please install Just manually.\"; \\\n\tfi\nelse\n\n# Fallback to default installation method\ninstall_just: install_just_default\n\nendif\nendif\n\n.PHONY: install_just install_just_default\n\n```\n\n\n## Next Steps: Creating initial secrets automatically\n\nAfter I can store values securely, I'd like to automate the creation of initial random secrets used for various services.\n\nRead more about it in my post: [[blog/04-initial-secrets]]"
    },
    "/blog/2024-09-14-personal-infrastructure-part-2:-setting-up-secret-storage-for-ansible": {
        "title": "Personal Infrastructure Part 2: Setting up Secret Storage for Ansible",
        "date": "2024-09-14",
        "tags": [
            "blog",
            "development",
            "infrastructure",
            "ansible"
        ],
        "publish": true,
        "url": "/blog/2024-09-14-personal-infrastructure-part-2:-setting-up-secret-storage-for-ansible",
        "path": "blog/02-ansible-secrets.md",
        "content": "In this post, I'm going to explain one way to store secrets when using Ansible.\n\n\nAnsible has the ability to encrypt and decrypt data, using what it calls the [Ansible Vault](https://docs.ansible.com/ansible/latest/vault_guide/index.html).\n\n## Introduction\n\nMany services require passwords, keys and other secrets. Some are used to access systems and services outside of the ansible deployment, and many are often randomly generated during the initial setup for use within the deployment.\n\nIn both cases, I like encrypting these using Ansible Vault. To make it a bit smoother, I take advantage of a few Ansible features.\nAfter digging around, and doing this a few times, I've settled on the following technique:\n\n1. I use a Python script to retrieve the key used by Ansible Vault to encrypt and decrypt. \n2. Edit `ansible.cfg` to use this script\n3. Make another python script and Ansible Playbook that create new random secrets for usage within playbooks.\n\n\n## Pieces\n\n### 1. Store Vault Password\n\nI made a simple python script that for storing a password in the system's protected storage. This should work on Windows, MacOS and Linux (in Desktop mode), though I haven't tested on anything except MacOS:\n\n```Python\nimport os\nimport sys\nimport keyring\nimport getpass\nimport argparse\nimport secrets\nimport string\n\nSERVICE_NAME = \"AnsibleVault\"\nACCOUNT_NAME = \"ansible_vault_password\"\n\ndef get_vault_password():\n    password = keyring.get_password(SERVICE_NAME, ACCOUNT_NAME)\n    return password\n\ndef set_vault_password(generate=False):\n    if generate:\n        password = ''.join(secrets.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(32))\n        print(\"Generated a new secure password.\")\n    else:\n        password = getpass.getpass(\"Enter New Ansible Vault password: \")\n    keyring.set_password(SERVICE_NAME, ACCOUNT_NAME, password)\n    return password\n\ndef clear_vault_password():\n    keyring.delete_password(SERVICE_NAME, ACCOUNT_NAME)\n    print(\"Ansible Vault password has been cleared.\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 1:\n        password = get_vault_password()\n        if not password:\n            sys.stderr.write(\"No Ansible Vault password found. Please set or generate one.\")\n            sys.exit(1)\n        print(password)\n    else:\n        parser = argparse.ArgumentParser(description=\"Manage Ansible Vault password\")\n        parser.add_argument(\"action\", choices=[\"set\", \"generate\", \"clear\"], help=\"Action to perform\")\n        args = parser.parse_args()\n\n        if args.action == \"set\":\n            set_vault_password()\n            print(\"Ansible Vault password has been set.\")\n        elif args.action == \"generate\":\n            stored_password = keyring.get_password(SERVICE_NAME, ACCOUNT_NAME)\n            if stored_password:\n                print(\"Ansible Vault password already exists. Use set to set it, or clear to clear it.\")\n            else:\n                set_vault_password(generate=True)\n                print(\"Ansible Vault password has been set.\")\n        elif args.action == \"clear\":\n            clear_vault_password()\n```\n\n### Configure Ansible to use Python Script\n\nI edited `ansible.cfg` to use the new python script:\n\n```bash\ncat ansible.cfg                                                                                                                                                                                                                master \u2b06 \u2716 \u25fc\n[defaults]\ninventory = inventory/hosts\nremote_user = ansible_user\nprivate_key_file = ~/.ssh/id_ed25519_aslan_ansible\nhost_key_checking = False\n+++ vault_password_file = get_vault_pass.py\ninterpreter_python = auto_silent\n```\n\n\n### Create initial vault password\n\n```bash\n    python3 physical-server-ansible-playbook/get_vault_pass.py generate\n```"
    },
    "/blog/2024-09-13-personal-infrastructure-part-1:-introduction-and-basic-ansible-setup": {
        "title": "Personal Infrastructure Part 1: Introduction and Basic Ansible Setup",
        "date": "2024-09-13",
        "tags": [
            "blog",
            "development",
            "infrastructure"
        ],
        "publish": true,
        "url": "/blog/2024-09-13-personal-infrastructure-part-1:-introduction-and-basic-ansible-setup",
        "path": "blog/01-ansible-setup.md",
        "content": "In this first step, I'm going to build Ansible skeleton project and test connectivity.  I will explain the motivation, my existing setup, how I setup Ansible, and how I make the process a bit smoother and more secure.\n\n# Introduction and Motivation\n\nEventually I will build out [[blog/01-personal-infrastructure]]. I will have a collection of files that given access to a handful of physical or virtual machines will \"build\" a complete foundation for a personal microservices project. To avoid moving too slowly, I will avoid trying to make any part of this process perfectly generic. It will work with my chosen hardware, software and 3rd party services. I will make some effort so that anyone following alone should be able to recreate something similar. \n\n## My Existing Setup\n\n### Hardware\n\n- [Protectli Vault](https://protectli.com/vault-6-port/), configured with 64GB RAM, and a Samsung 4TB SSD.\n- AMD Threadripper desktop with 128GB RAM, and 8TB of SSD storage.\n- Old MSI laptop with 16GB or RAM and 1 TB of SSD Storage\n- Digital Ocean Intel SSD VM with 4GB of RAM and 100 GB or storage.\n- Smaller Protectli Vault running pfSense\n\n### Existing Use Cases\n\n Right now I host a few personal web services:\n\n - [Plex](plex.tv)\n - My \"spiritual\" website: [i am that i am](https://iamthatiam.org), an \"almost\" static site that uses a bit of Django.\n - A personal [Sentry](sentry.io) instance.\n - A personal [Jenkins](jenkins.io) instance\n - A [Plausible Analytics](https://plausible.io) instance\n - A few more\n\n\n### Network Topology\n\nAll the physical hardware is connected via a gigabit switch behind pfSense router. The pfSense router is running a [Wireguard](https://www.wireguard.com) server that I connect to with my roaming Mac laptop, and iPhone. All these servers are on the `10.0.0.0/24` subnet. All Wireguard clients are on the `10.2.0.0/24` subnet, with a specific tunnel for each one.\n\nMy VM provided by Digital Ocean is running Debian 12. It has a permanent Wireguard tunnel back to the pfSense box. For this website, I will call this box `gateway`.\n\nI'ved named all three physical compute nodes after cats:\n\n 1. [`aslan`](https://en.wikipedia.org/wiki/Aslan) - AMD Threadripper system, and main computer node\n 2. [`green-lion`](https://en.wikipedia.org/wiki/Suns_in_alchemy) - Large Protectli vault\n 3. [`bagheera`](https://en.wikipedia.org/wiki/Bagheera) - Old MSI latop\n\n Click on the links to see a bit behind each name. I must confess, I'm not fully aware of the history of `green-lion` with the field of alchemy, so I hope it doesn't mean something terrible!\n\n\n These are running in containers manually deployed using [Docker Compose](https://docs.docker.com/compose/). Most of them are running on `aslan`, with some running in \"high availability\" mode, with containers running on both `aslan` and `green-lion`. An [nginx](nginx.com) reverse proxy runs on `gateway` proxying traffic and terminating SSL using [Let's Encrypt](letsencrypt.org).\n\n I'd like to leave all of these services running with close to zero downtime, while deploying new services using increasingly more advanced techniques, culminating in a platform built on top of Kubernetes.\n\n To do so, I'm going to first get some automation in place to configure and manage these physical servers. Then I'll move the manual configuration of my existing service into Ansible, and then from there will setup CI using [Drone CI](drone.io).\n\n# Installing and testing Ansible\n\n## What is Ansible. Why am I using it?\n\nI've used Ansible a few times to deploy web applications and configure servers. I don't love the giant collection of templated YAML, and yet, it provides too much value to ignore.\n\nAs described on their homepage:\n\n> Ansible is an open source IT automation engine that automates provisioning, configuration management, application deployment, orchestration, and many other IT processes. It is free to use, and the project benefits from the experience and intelligence of its thousands of contributors.\n\nIn my words, Ansible is a tool that let's you write YAML file that describe actions that should be taken on a collection of servers, including copying files, installing software and more. When structured and written well, Ansible \"Playbooks\" are [[idempotent]], and repeatable.\n\nI'm going to be using ansible primarily to manage the physical servers before any additional infrastructure is in place.\n\n\n## Requirements\n\nBefore we can use ansible, we need passwordless sudo ssh access to all nodes.\n\nRepeat this step for all physical nodes that you wish to manage with Ansible. I'm going to target `aslan` and `green-lion` initially, and then maybe move onto `gateway` and `bagheera` later.\n\n### 1. Passwordless sudo ansible_user account\n\n\n1. Create a new user named `ansible_user`:\n\n```\nsudo adduser ansible_user\n```\n\n2. Give `ansible_user` sudo access without requiring a password:\n\n```\necho \"ansible_user ALL=(ALL) NOPASSWD:ALL\" | sudo tee /etc/sudoers.d/ansible_user\n```\n\n3. Set up SSH key authentication for `ansible_user`:\n\n```\nsudo mkdir -p /home/ansible_user/.ssh\nsudo chmod 700 /home/ansible_user/.ssh\nsudo touch /home/ansible_user/.ssh/authorized_keys\nsudo chmod 600 /home/ansible_user/.ssh/authorized_keys\n```\n\n4. Copy your public SSH key into the `authorized_keys` file:\n\n```\nsudo sh -c 'echo \"YOUR_PUBLIC_SSH_KEY\" >> /home/ansible_user/.ssh/authorized_keys'\n```\n\n   Replace `YOUR_PUBLIC_SSH_KEY` with your actual public SSH key.\n\n5. Set proper ownership for the `.ssh` directory and its contents:\n\n```\nsudo chown -R ansible_user:ansible_user /home/ansible_user/.ssh\n```\n\nAfter completing these steps, you should be able to SSH into the server as `ansible_user` using your SSH key, and execute sudo commands without a password prompt.\n\n### 2: Ansible installed on local development machine\n\nTo install Ansible on your local development machine, follow these steps:\n\n1. Create a virtual environment:\n\n```bash\npython3 -m venv ansible-venv\n```\n\n2. Activate the virtual environment:\n\n```bash\nsource ansible-venv/bin/activate\n```\n\n3. Install Ansible within the virtual environment:\n\n```bash\npip install ansible\n```\n\n4. Verify the installation:\n\n```bash\nansible --version\n```\n\nThis approach isolates Ansible and its dependencies in a dedicated environment, preventing conflicts with other Python packages on your system.\n\n## Create Ansible inventory and test connectivity\n\nCreate the following files and directory structure\n\n``` bash\n$ tree physical-server-ansible-playbook\n\u251c\u2500\u2500 ansible.cfg\n\u251c\u2500\u2500 inventory\n\u2502   \u2514\u2500\u2500 hosts\n\u251c\u2500\u2500 playbook.yml\n\u2514\u2500\u2500 roles\n    \u2514\u2500\u2500 hello\n        \u2514\u2500\u2500 tasks\n            \u2514\u2500\u2500 main.yml\n```\n\n```bash\ncat ansible.cfg\n[defaults]\ninventory = inventory/hosts\nremote_user = ansible_user\nprivate_key_file = ~/.ssh/id_ed25519_aslan_ansible\nhost_key_checking = False\ninterpreter_python = auto_silent\n```\n\n```bash\n[lz]\ncat inventory/hosts\naslan ansible_host=aslan\ngreen-lion ansible_host=green-lion\n\n[all:vars]\nansible_user=ansible_user\nansible_ssh_private_key_file=~/.ssh/id_ed25519_aslan_ansible\n```\n\n\nOf note, make sure the ssh key is correct in `ansible.cfg`. Also note that `host_key_checking = False` is a potential security risk. I'm running this on my home LAN so I think I'm good, but just be aware.\n\nI've called this group of servers the \"lz\" for landing zone. I'll continue the metaphor, as I \"land\" on a distant planet and begin \"terraforming.\"\n\n\nTo verify this is working you can run the ansible ping command\n\n```bash\nansible all -m ping                                                                                                                                                                                                                 \u2718 1 master \u2b06 \u2731 \u25fc\ngreen-lion | UNREACHABLE! => {\n    \"changed\": false,\n    \"msg\": \"Failed to connect to the host via ssh: ansible_user@10.0.0.22: Permission denied (publickey).\",\n    \"unreachable\": true\n}\naslan | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3.11\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```\n\nAs you can see, my connectivity to `green-lion` is not correct. I'll go ahead and make the ansible user on `green-lion` and try again.\n\n\n```bash\nansible all -m ping                                                                                                                                                                                                                     master \u2b06 \u2731 \u25fc\naslan | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3.11\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\ngreen-lion | SUCCESS => {\n    \"ansible_facts\": {\n        \"discovered_interpreter_python\": \"/usr/bin/python3.10\"\n    },\n    \"changed\": false,\n    \"ping\": \"pong\"\n}\n```\n\n\n## Next Steps\n\nAs you may be able to guess simply from the direction of this blog, I like automating things. In my next post I'll describe how a securely store secrets for usage within Ansible playbooks, and how I create initial random secrets usable for passwords and keys for deployed software.\n\nRead more in [[blog/02-ansible-secrets]]."
    },
    "/blog": {
        "title": "index",
        "date": "2024-09-16",
        "tags": [],
        "publish": true,
        "url": "/blog",
        "path": "blog/index.md",
        "content": "# Blog\n\n## Subtitle\n\n### Foo\n\n\n```Python\n\ndef foo():\n    print(\"Hello, world!\")\n```"
    },
    "/blog/2024-09-02-personal-microservices-infrastructure-project": {
        "title": "Personal Microservices Infrastructure Project",
        "date": "2024-09-02",
        "tags": [
            "devops",
            "programming",
            "kubernetes",
            "hashicorp",
            "terraform",
            "homelab"
        ],
        "publish": true,
        "url": "/blog/2024-09-02-personal-microservices-infrastructure-project",
        "path": "blog/01-personal-infrastructure.md",
        "content": "Join me as I learn how to build a homelab suitable for playing with microservices infrastructure. I am building this to serve as the foundation of a \"Personal Cloud.\" This personal cloud is intended as a proof of concept of what a better future internet could look like. \n\n### Introduction\n\nThis project aims to create a comprehensive, real-world microservices architecture, focusing on automation, scalability, and best practices in modern DevOps.\n\nI'll write developer journal entries as blog posts, as well as organize them into a more structured \"how-to\" documentation suitable for recreating the project or following along.\n\nAs of now, I've done some preliminary research and have come up with this plan of action. As I go ahead and my hands dirty, I imagine some of this plan will change, either slightly or dramatically as I learn from my mistakes and refine my understanding.\n\n\n### Tentative Plan of Action\n\n#### 1. Physical Server Setup\n  - [[blog/01-ansible-setup]]\n  - [[blog/02-ansible-secrets]]\n  - [[blog/03-simple-automation]]\n  - [[blog/04-initial-secrets]]\n\n#### 2. CI Runner Setup:\n   - Install and configure a CI tool (likely [Drone CI](https://www.drone.io/))\n   - This CI runner will manage subsequent infrastructure deployments\n   - Automatically run Ansible on infrastructure code changes.\n\n#### 3. Infrastructure as Code:\n   - Use [Packer](https://www.packer.io/) for creating standardized VM images\n   - Implement [Terraform](https://www.terraform.io/) for infrastructure provisioning\n   - Setup [Headscale](https://www.headscale.net/) for secure networking\n   - Set up [Nomad](https://www.nomadproject.io/) for initial workload orchestration\n\n#### 4. Core Services Deployment:\n   - Deploy [Vault](https://www.vaultproject.io/) for secrets management\n   - Set up monitoring tools (e.g., [Prometheus](https://prometheus.io/), [Grafana](https://grafana.com/))\n   - Implement logging solution (e.g., [ELK Stack](https://www.elastic.co/elastic-stack))\n\n#### 5. Advanced Orchestration:\n   - Create a separate Nomad cluster for application workloads\n   - Potentially set up [K3s](https://k3s.io/) (lightweight Kubernetes) within Nomad\n\n#### 6. Network and Security:\n   - Implement ingress controllers and load balancers\n   - Set up network policies and firewalls\n\n#### 7. Automation and Scalability:\n   - Develop scripts and workflows for rapid cluster creation\n   - Implement auto-scaling and self-healing capabilities\n\n### Learning Objectives\n\nWhy am I doing this? I'd like to learn these tools, and build something useful for myself and others. I have a large project in mind, and I will discuss it after I build the initial proof of concept \"personal cloud\".\n\nPut into dry bullet points, I'd like to:\n\n- Gain hands-on experience with modern DevOps tools and practices\n- Understand whether microservices architecture is a good fit for my project\n- Develop skills in automation, security, and scalability in distributed systems\n- Build something useful for myself and others\n\n### Sharing Knowledge\n\nThroughout this project, I will:\n\n  - Document each step in this developer journal or blog\n  - Create some guides and tutorials\n  - Share challenges faced and solutions implemented. I'd like to specifically share my perspective, from someone new to \n    modern DevOps, though no stranger to software engineering.\n  - Possibly create video content"
    }
}